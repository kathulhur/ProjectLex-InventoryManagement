// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectLex.InventoryManagement.Database.Data;

namespace ProjectLex.InventoryManagement.Database.Migrations
{
    [DbContext(typeof(InventoryManagementContext))]
    [Migration("20220111102305_Initial Migrate")]
    partial class InitialMigrate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.AttributeDTO", b =>
                {
                    b.Property<Guid>("AttributeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttributeID");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.AttributeValueDTO", b =>
                {
                    b.Property<Guid>("AttributeValueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeValueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributeValueStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttributeValueID", "AttributeID");

                    b.HasIndex("AttributeID");

                    b.ToTable("AttributeValues");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.CategoryDTO", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.CompanyDTO", b =>
                {
                    b.Property<Guid>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CompanyVAT")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CompanyID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.OrderDTO", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.OrderDetailDTO", b =>
                {
                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("OrderDetailAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderDetailQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "StoreID", "OrderID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.ProductAttributeValueDTO", b =>
                {
                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeValueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductID", "StoreID", "AttributeValueID", "AttributeID");

                    b.HasIndex("AttributeValueID", "AttributeID");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.ProductCategoryDTO", b =>
                {
                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductID", "StoreID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.ProductDTO", b =>
                {
                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductAvailability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductSKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductID", "StoreID");

                    b.HasIndex("StoreID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.RoleDTO", b =>
                {
                    b.Property<Guid>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.StoreDTO", b =>
                {
                    b.Property<Guid>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreID");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.SupplierDTO", b =>
                {
                    b.Property<Guid>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.UserDTO", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUsername")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.AttributeValueDTO", b =>
                {
                    b.HasOne("ProjectLex.InventoryManagement.Database.DTOs.AttributeDTO", "Attribute")
                        .WithMany("AttributeValues")
                        .HasForeignKey("AttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.OrderDTO", b =>
                {
                    b.HasOne("ProjectLex.InventoryManagement.Database.DTOs.UserDTO", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.OrderDetailDTO", b =>
                {
                    b.HasOne("ProjectLex.InventoryManagement.Database.DTOs.OrderDTO", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectLex.InventoryManagement.Database.DTOs.ProductDTO", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID", "StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.ProductAttributeValueDTO", b =>
                {
                    b.HasOne("ProjectLex.InventoryManagement.Database.DTOs.AttributeValueDTO", "AttributeValue")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeValueID", "AttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectLex.InventoryManagement.Database.DTOs.ProductDTO", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductID", "StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeValue");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.ProductCategoryDTO", b =>
                {
                    b.HasOne("ProjectLex.InventoryManagement.Database.DTOs.CategoryDTO", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectLex.InventoryManagement.Database.DTOs.ProductDTO", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductID", "StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.ProductDTO", b =>
                {
                    b.HasOne("ProjectLex.InventoryManagement.Database.DTOs.StoreDTO", "Store")
                        .WithMany()
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectLex.InventoryManagement.Database.DTOs.SupplierDTO", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.UserDTO", b =>
                {
                    b.HasOne("ProjectLex.InventoryManagement.Database.DTOs.RoleDTO", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.AttributeDTO", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.AttributeValueDTO", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.CategoryDTO", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.OrderDTO", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.ProductDTO", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.RoleDTO", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectLex.InventoryManagement.Database.DTOs.SupplierDTO", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
